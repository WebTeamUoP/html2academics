const csvInput = require('./csvInput');
const htmlInput = require('./htmlInput');
const checkLinks = require('./checkLinks');

// Utils and variables definitions
// const academicsFile = '../data/long-data.html';
const academicsFile = '../../data/csv.csv';
const baseURL = 'https://researchportal.port.ac.uk/portal/en/persons/';

/** Format the name for the URL
 *
 * @param {string} name The original name
 * @returns {string} URL compatible name
 */
const normaliseAcademicName = (name) => name.replace(/\s/g, '-').toLowerCase();

/** Build the academic's URL
 *
 * @param {Object} academic The academic's info from the file
 * @param { string } academic.name The academic's preferred name
 * @param { string } academic.uuid The ID number generated by PURE
 * @returns { URL } The absolute URL of the academics page
 */
const generateAcademicURL = (academic) => {
	let { name, uuid, publishing, knownAs } = academic;
	if (!uuid) {
		console.warn('Has no IIUD');
		return undefined;
	}

	if (typeof name !== 'undefined') {
		const url = `${baseURL}${normaliseAcademicName(
			name
		)}(${uuid})/publications.html`;
		return { url, name, uuid };
	} else if (publishing && knownAs) {
		const url = `${baseURL}${normaliseAcademicName(
			knownAs
		)}(${uuid})/publications.html`;
		return { url, uuid, name: publishing };
	} else {
		console.warn('eh? ', academic);
	}
};

/**
 *
 * @param {URL} path The path to the file with the academic data
 */
const extractAcademicsFromFile = (path) => {
	console.log(path);
	if (path.endsWith('.csv')) {
		return csvInput(path);
	} else if (path.endsWith('.html')) {
		return htmlInput(path);
	}
};
// END definitions

const named = extractAcademicsFromFile(academicsFile);
// console.log(named);

console.log('Generating URLs');
const urlsToCheck = named.map(generateAcademicURL);
// console.log(urlsToCheck);

console.log('Checking URLs');
checkLinks(urlsToCheck);
